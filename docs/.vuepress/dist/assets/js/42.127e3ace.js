(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{475:function(t,s,a){"use strict";a.r(s);var n=a(2),o=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[t._m(0),t._v(" "),a("p",[t._v("github地址："),a("a",{attrs:{href:"https://github.com/iofu728/PAT-A-by-iofu728",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/iofu728/PAT-A-by-iofu728"),a("OutboundLink")],1),a("br"),t._v("\n难度：☆☆☆"),a("br"),t._v("\n关键词：dp（只能拿23分）,快速查找")]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),a("p",[t._v("在火星上钱是串在一起的，要付钱就得选择连续一段钱，求最合适的付款方式。")]),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7)])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"_1044-shopping-in-mars-25-☆☆☆"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1044-shopping-in-mars-25-☆☆☆","aria-hidden":"true"}},[this._v("#")]),this._v(" 1044 Shopping in Mars 25 ☆☆☆")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"题目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#题目","aria-hidden":"true"}},[this._v("#")]),this._v(" 题目")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("blockquote",[a("p",[t._v("1044.Shopping in Mars (25)"),a("br"),t._v("\nShopping in Mars is quite a different experience. The Mars people pay by chained diamonds. Each diamond has a value (in Mars dollars M$). When making the payment, the chain can be cut at any position for only once and some of the diamonds are taken off the chain one by one. Once a diamond is off the chain, it cannot be taken back. For example, if we have a chain of 8 diamonds with values M$3, 2, 1, 5, 4, 6, 8, 7, and we must pay M$15. We may have 3 options:")]),t._v(" "),a("p",[t._v("1.Cut the chain between 4 and 6, and take off the diamonds from the position 1 to 5 (with values 3+2+1+5+4=15)."),a("br"),t._v("\n2.Cut before 5 or after 6, and take off the diamonds from the position 4 to 6 (with values 5+4+6=15)."),a("br"),t._v("\n3.Cut before 8, and take off the diamonds from the position 7 to 8 (with values 8+7=15)."),a("br"),t._v("\nNow given the chain of diamond values and the amount that a customer has to pay, you are supposed to list all the paying options for the customer.")]),t._v(" "),a("p",[t._v("If it is impossible to pay the exact amount, you must suggest solutions with minimum lost.")]),t._v(" "),a("p",[t._v("Input Specification:")]),t._v(" "),a("p",[t._v("Each input file contains one test case. For each case, the first line contains 2 numbers: "),a("code",[t._v("N")]),t._v(" (<=105), the total number of diamonds on the chain, and "),a("code",[t._v("M")]),t._v(" (<=108), the amount that the customer has to pay. Then the next line contains "),a("code",[t._v("N")]),t._v(" positive numbers "),a("code",[t._v("D1")]),t._v(" … "),a("code",[t._v("DN")]),t._v(" ("),a("code",[t._v("Di")]),t._v("<=103 for all i=1, …, "),a("code",[t._v("N")]),t._v(") which are the values of the diamonds. All the numbers in a line are separated by a space.")]),t._v(" "),a("p",[t._v("Output Specification:")]),t._v(" "),a("p",[t._v("For each test case, print “i-j” in a line for each pair of i <= j such that "),a("code",[t._v("Di")]),t._v(" + … + "),a("code",[t._v("Dj")]),t._v(" = "),a("code",[t._v("M")]),t._v(". Note that if there are more than one solution, all the solutions must be printed in increasing order of i.")]),t._v(" "),a("p",[t._v("If there is no solution, output “i-j” for pairs of i <= j such that "),a("code",[t._v("Di")]),t._v(" + … + "),a("code",[t._v("Dj")]),t._v(" > "),a("code",[t._v("M")]),t._v(" with ("),a("code",[t._v("Di")]),t._v(" + … + "),a("code",[t._v("Dj")]),t._v(" – "),a("code",[t._v("M")]),t._v(") minimized. Again all the solutions must be printed in increasing order of i.")]),t._v(" "),a("p",[t._v("It is guaranteed that the total value of diamonds is sufficient to pay the given amount.")]),t._v(" "),a("p",[t._v("Sample Input 1:"),a("br"),t._v("\n16 15"),a("br"),t._v("\n3 2 1 5 4 6 8 7 16 10 15 11 9 12 14 13")]),t._v(" "),a("p",[t._v("Sample Output 1:"),a("br"),t._v("\n1-5"),a("br"),t._v("\n4-6"),a("br"),t._v("\n7-8"),a("br"),t._v("\n11-11")]),t._v(" "),a("p",[t._v("Sample Input 2:"),a("br"),t._v("\n5 13"),a("br"),t._v("\n2 4 5 7 9")]),t._v(" "),a("p",[t._v("Sample Output 2:"),a("br"),t._v("\n2-4"),a("br"),t._v("\n4-5")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"大意"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#大意","aria-hidden":"true"}},[this._v("#")]),this._v(" 大意")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"思路"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#思路","aria-hidden":"true"}},[this._v("#")]),this._v(" 思路")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ol",[a("li",[t._v("一看这问题，下意识以为就是求最接近某值连续和，一想这不是动态规划吗？"),a("br"),t._v("\n按照dp思路，确定递归式子，取左右指针为p=0,q=0："),a("br"),t._v("\n当sum==m,输出,并++q；"),a("br"),t._v("\n当sum>m，先判断是不是离m更近（与maxmin比较），再判断p,q是否紧挨着，紧挨着就p,q全++,否则++p，更新sum；"),a("br"),t._v("\n当sum<=m,++q,更新sum")]),t._v(" "),a("li",[t._v("但按照上述思路，一个测试点超时过不去只有23分（好像也足够了，hhh）"),a("br"),t._v("\n所以先想怎么能够优化，考虑到sum在运算过程中都是做累加工作，如果一开始dis就代表和，那么会减少点计算量。")]),t._v(" "),a("li",[t._v("整个过程，用了一个for'循环，一次while’循环，产生时间复杂度的主要在循环。")]),t._v(" "),a("li",[t._v("第一个循环不能避免，所以一开始考虑边录入边处理，思来想去好像没思路。")]),t._v(" "),a("li",[t._v("最后从后一个循环入手，考虑dis数组单增的特性，实际上我们求得就是每一个左指针p对应的右指针q的查找工作。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"code"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#code","aria-hidden":"true"}},[this._v("#")]),this._v(" code")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{attrs:{class:"token macro property"}},[t._v("#"),a("span",{attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("<iostream>")])]),t._v("\n"),a("span",{attrs:{class:"token macro property"}},[t._v("#"),a("span",{attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("<vector>")])]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" std"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" INF "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0x3fffffff")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" m"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" node "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sum"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" q"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("main")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" argc"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v("argv"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" maxmin "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" INF"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" q "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sum "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" temp "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" vis "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  vector"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("node"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" v"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  cin "),a("span",{attrs:{class:"token operator"}},[t._v(">>")]),t._v(" n "),a("span",{attrs:{class:"token operator"}},[t._v(">>")]),t._v(" m"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" dis"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("n "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("getchar")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("<=")]),t._v(" n"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    cin "),a("span",{attrs:{class:"token operator"}},[t._v(">>")]),t._v(" temp"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    sum "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" temp"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    dis"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" sum"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("getchar")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  sum "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  dis"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p "),a("span",{attrs:{class:"token operator"}},[t._v("<=")]),t._v(" n "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" q "),a("span",{attrs:{class:"token operator"}},[t._v("<=")]),t._v(" n "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" p "),a("span",{attrs:{class:"token operator"}},[t._v("<=")]),t._v(" q"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sum "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" m"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      cout "),a("span",{attrs:{class:"token operator"}},[t._v("<<")]),t._v(" p "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"-"')]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("<<")]),t._v(" q "),a("span",{attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      vis "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{attrs:{class:"token operator"}},[t._v("++")]),t._v("q"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q "),a("span",{attrs:{class:"token operator"}},[t._v("<=")]),t._v(" n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        sum "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" dis"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("q"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" dis"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("p"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sum "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" m"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token comment"}},[t._v('//            cout<<"*"<<sum<<" "<<p<<" "<<q<<endl;')]),t._v("\n      "),a("span",{attrs:{class:"token operator"}},[t._v("++")]),t._v("q"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q "),a("span",{attrs:{class:"token operator"}},[t._v("<=")]),t._v(" n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        sum "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" dis"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("q"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" dis"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("p"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sum "),a("span",{attrs:{class:"token operator"}},[t._v("<=")]),t._v(" maxmin"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token comment"}},[t._v('//              cout<<"--";')]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sum "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" maxmin"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          v"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("clear")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        node temp"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        temp"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("p "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" temp"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("q "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" q"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" maxmin "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" sum"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" temp"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sum "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" sum"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        v"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push_back")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("temp"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" q "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token comment"}},[t._v('//              cout<<"??";')]),t._v("\n        "),a("span",{attrs:{class:"token operator"}},[t._v("++")]),t._v("p"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{attrs:{class:"token operator"}},[t._v("++")]),t._v("q"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token comment"}},[t._v('//              cout<<"<>";')]),t._v("\n        "),a("span",{attrs:{class:"token operator"}},[t._v("++")]),t._v("p"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      sum "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" dis"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("q"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" dis"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("p"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("vis"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" v"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("size")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      cout "),a("span",{attrs:{class:"token operator"}},[t._v("<<")]),t._v(" v"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("p "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"-"')]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("<<")]),t._v(" v"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("q "),a("span",{attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("//#include <iostream>")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("//#include <vector>")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// using namespace std;")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// vector<int> sum, resultArr;")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// int n, m;")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// void Func(int i, int &j, int &tempsum) {")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("//    int left = i, right = n;")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("//    while(left < right) {")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("//        int mid = (left + right) / 2;")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("//        if(sum[mid] - sum[i-1] >= m)")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("//            right = mid;")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("//        else")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("//            left = mid + 1;")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("//    }")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("//    j = right;")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("//    tempsum = sum[j] - sum[i-1];")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("//}")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// int main() {")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v('//    scanf("%d%d", &n, &m);')]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("//    sum.resize(n+1);")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("//    for(int i = 1; i <= n; i++) {")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v('//        scanf("%d", &sum[i]);')]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("//        sum[i] += sum[i-1];")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("//    }")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("//    int minans = sum[n];")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("//    for(int i = 1; i <= n; i++) {")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("//        int j, tempsum;")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("//        Func(i, j, tempsum);")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("//        if(tempsum > minans) continue;")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("//        if(tempsum >= m) {")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("//            if(tempsum < minans) {")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("//                resultArr.clear();")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("//                minans = tempsum;")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("//            }")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("//            resultArr.push_back(i);")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("//            resultArr.push_back(j);")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("//        }")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("//    }")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("//    for(int i = 0; i < resultArr.size(); i += 2)")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v('//        printf("%d-%d\\n", resultArr[i], resultArr[i+1]);')]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("//    return 0;")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("//}")]),t._v("\n\n")])])])}],!1,null,null,null);o.options.__file="1044.md";s.default=o.exports}}]);