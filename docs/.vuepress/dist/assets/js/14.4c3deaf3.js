(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{447:function(t,s,a){"use strict";a.r(s);var n=a(2),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("p",[t._v("作为Data mining 的第一篇 先来讲讲频繁模式")]),t._v(" "),a("p",[t._v("频繁模式是推荐算法的基础")]),t._v(" "),a("p",[t._v("主要解决的是从一堆数据中挖掘出频繁的组合模式")]),t._v(" "),a("p",[t._v("举个简单的例子")]),t._v(" "),t._m(0),t._v(" "),a("p",[t._v("如何在大量数据中找到可能相关的几个问题，称之为Frequent Pattern")]),t._v(" "),a("p",[t._v("频繁程度通过支持度、置信度两个参数来衡量")]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),a("p",[t._v("Item Sets指的是假设不考虑数据之间的顺序")]),t._v(" "),t._m(3),t._v(" "),a("p",[t._v("我们可以得出")]),t._v(" "),t._m(4),t._v(" "),a("p",[t._v("根据这一点，Agrawal & Srikant 在94年提出了著名的Apriori算法")]),t._v(" "),t._m(5),t._v(" "),a("p",[t._v("伪代码:")]),t._v(" "),t._m(6),t._m(7),t._v(" "),a("p",[t._v("但Apriori也有一些缺点")]),t._v(" "),t._m(8),t._v(" "),a("p",[t._v("Apriori也有一系列改进算法，比如说用hash存储可能的取值，做剪枝等等")]),t._v(" "),t._m(9),t._v(" "),a("p",[t._v("仔细想一下上述算法的实现过程")]),t._v(" "),a("p",[t._v("一层层扩展，从大小为1开始，到2，再到k，到k+1")]),t._v(" "),a("p",[t._v("是不是很像BFS")]),t._v(" "),a("p",[t._v("那么我们不免想是不是会有类似DFS的算法")]),t._v(" "),a("p",[t._v("Jiawei Han, Jian Pei 在2000年提出FP-tree算法")]),t._v(" "),a("p",[t._v("通过构造前缀树来实现类似深度搜索的算法")]),t._v(" "),a("p",[t._v("先把所有集合按字母出现频次逆序排列，筛选出现频次小于min_support值的项")]),t._v(" "),a("p",[t._v("然后找所有DB中所有满足当前前缀abc的项，DB|abc")]),t._v(" "),a("p",[t._v("依次遍历")]),t._v(" "),a("p",[t._v("算法通过前缀树Trie实现")]),t._v(" "),a("p",[t._v("举个简单的例子")]),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),a("p",[t._v("刚才说到的Item Sets中间的数据为无序的，但实际中，很多频繁集是在特定顺序下才成立的")]),t._v(" "),a("p",[t._v("Sequence主要研究的就是带有顺序的情况, 把每次操作的项放在集合Si中，集合S1, S2, ...,Sn组成序列集")]),t._v(" "),a("p",[t._v("同样求在最低支持度下所有的频繁集")]),t._v(" "),t._m(12),t._v(" "),a("p",[t._v("Join Phase在96年提出类似Apriori的算法GSP")]),t._v(" "),a("p",[t._v("和Apriori唯一的差别就是如何计算子集")]),t._v(" "),a("p",[t._v("现在GSP中的集合S为集合的集合")]),t._v(" "),a("p",[t._v("定义S的子集C满足")]),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),a("p",[t._v("PrefixSpan 全称为Prefix-Projected Pattern Growth")]),t._v(" "),a("p",[t._v("前缀投影就是后缀Suffix，那么什么是前缀和后缀呢")]),t._v(" "),t._m(16),t._v(" "),t._m(17),t._v(" "),a("p",[t._v("PrefixSpan的思路就是")]),t._v(" "),a("p",[t._v("从a开始遍历所有满足min_support的前缀")]),t._v(" "),a("p",[t._v("然后对后缀检查是否满足min_support，若所有项都满足，则保留满足项")]),t._v(" "),a("p",[t._v("然后依次合并前缀项，递归遍历")]),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),a("p",[t._v("当前面的集合推广到数结构")]),t._v(" "),a("p",[t._v("解决的主要是类似于网站链接的场景")]),t._v(" "),t._m(20),t._v(" "),a("p",[t._v("思考这么一个问题")]),t._v(" "),a("p",[t._v("有一颗树 如何判断是否是节点A是不是节点B的祖先")]),t._v(" "),a("p",[t._v("一般一点的办法就是以A为root节点，向下遍历，如果遍历到B则说明A是B的祖先")]),t._v(" "),a("p",[t._v("但这样很显然当树的规模比较小的时候还可以，但一旦树结构复杂时，就会接近O(n), 尤其是需要多次查找时")]),t._v(" "),a("p",[t._v("有人就想出一个O(1)的算法")]),t._v(" "),a("p",[t._v("先 先序遍历 一次树，第一次遍历到该节点时记录时间为Tleft, 再次到节点记为Tright")]),t._v(" "),a("p",[t._v("用区间[Tleft, Tright]表示该树的祖孙关系")]),t._v(" "),a("p",[t._v("当A节点的区间为Ka，B节点的区间为Kb时")]),t._v(" "),t._m(21),t._v(" "),t._m(22),t._v(" "),a("p",[t._v("只要遍历一次建立区间索引之后，再次确认节点间的祖孙关系只需O(1)")]),t._v(" "),a("hr"),t._v(" "),t._m(23),t._v(" "),a("p",[t._v("利用string表示一棵二叉树")]),t._v(" "),a("p",[t._v("按先序遍历二叉树")]),t._v(" "),t._m(24),t._v(" "),a("p",[t._v("那么可以利用输出的节点值唯一的表示一棵二叉树")]),t._v(" "),t._m(25),t._v(" "),t._m(26),t._v(" "),a("p",[t._v("因为前面用String来表示一棵树")]),t._v(" "),a("p",[t._v("如果两棵树具有相同的前缀，我们就称这两棵树为Equivalence Classes")]),t._v(" "),t._m(27),t._v(" "),a("p",[t._v("其中Element List(m, n)中m指的是插入值，n为父节点id")]),t._v(" "),t._m(28),t._v(" "),a("p",[t._v("当我们用String来表示一个一棵树的时候，那么我们就把问题转化成Sequence Pattern")]),t._v(" "),a("p",[t._v("Mohammed Javeed Zaki在2002年提出TreeMiner算法")]),t._v(" "),a("p",[t._v("当父节点包含子节点，则链路可以加长")]),t._v(" "),t._m(29),a("p",[t._v("举个🌰")]),t._v(" "),t._m(30),t._v(" "),t._m(31),t._v(" "),a("p",[t._v("上面TreeMiner算法类似于Apriori，属于DFS类型的算法")]),t._v(" "),a("p",[t._v("于是很容易想到是否有类似于FP-tree，PrefixSpan属于BFS的算法")]),t._v(" "),a("p",[t._v("Lei Zou, Yansheng Lu等人在2006年提出PrefixTreeESpan算法")]),t._v(" "),a("p",[t._v("从结构上看，从一个节点开始，找所有满足该前缀的结构")]),t._v(" "),a("p",[t._v("如果该结构的个数满足min_support则进入下一步")]),t._v(" "),a("p",[t._v("对所有后缀结构首位进行分析，如果满足前缀-后缀首位的结构数大于min_support时，则进入下一部")]),t._v(" "),a("p",[t._v("直到没有可分析的结构 则该结构为频繁树")]),t._v(" "),t._m(32),t._v(" "),t._m(33),t._v(" "),a("p",[t._v("如果我们把前面的树结构再进一步推广到图，那么我们要求的就是频繁子图")]),t._v(" "),t._m(34),t._v(" "),a("p",[t._v("AGM = Apriori-base graph Mining")]),t._v(" "),t._m(35),a("p",[t._v("Akihiro Inokuchi提出用邻接矩阵存储图数据，通过basket analysis得到图的频繁子图")]),t._v(" "),a("p",[t._v("通过定义编码方式把n×m的矩阵变成水平扩展的string")]),t._v(" "),a("p",[t._v("与Apriori算法类似，候选频繁子图的生成是根据子图的大小通过水平搜索来进行的")]),t._v(" "),a("p",[t._v("令Xk和Yk是两个大小为k的频繁图G(Xk)和G(Yk)的顶点排序的邻接矩阵")]),t._v(" "),a("p",[t._v("如果G(Xk)和G(Yk)除了第k行和第k列的元素之外具有相等的矩阵元素，则它们被连接以生成Zk+1")]),t._v(" "),t._m(36),t._v(" "),t._m(37),t._v(" "),t._m(38),t._m(39),t._v(" "),t._m(40),t._v(" "),t._m(41),t._v(" "),a("p",[t._v("额 最后有点水了 等我消化消化 再来写")]),t._v(" "),t._m(42),t._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"http://www.rsrikant.com/papers/vldb94_rj.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Fast Algorithms for Mining Association Rules"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.cs.sfu.ca/~jpei/publications/sigmod00.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Mining Frequent Patterns without Candidate Generation"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://pdfs.semanticscholar.org/d420/ea39dc136b9e390d05e964488a65fcf6ad33.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Mining Sequential Patterns: Generalizations and Performance Improvements"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://hanj.cs.illinois.edu/pdf/span01.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("PrefixSpan: Mining Sequential Patterns Efficiently by Prefix-Projected Pattern Growth"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.160.8511&rep=rep1&type=pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Efficiently Mining Frequent Trees in a Forest"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.136.4076&rep=rep1&type=pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("PrefixTreeESpan: A Pattern Growth Algorithm for Mining Embedded Subtrees "),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.eecs.wsu.edu/~holder/courses/cse6363/spr04/present/Inokuchi00.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("An Apriori-based Algorithm for Mining Frequent Substructures from Graph Data"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.cs.ucsb.edu/~xyan/papers/gSpan-short.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("gSpan: Graph-Based Substructure Pattern Mining"),a("OutboundLink")],1)])])])},[function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("可能买了Mac的人，过几天会去买贴膜"),s("br"),this._v("\n可能买考研英语书的人，过几天会去买考研数学书")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("A->B support")]),this._v(": 即模式A, B出现频率"),s("br"),this._v(" "),s("code",[this._v("A->B configure")]),this._v(": 即模式A发生情况下B发生的概率")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"item-sets"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#item-sets","aria-hidden":"true"}},[this._v("#")]),this._v(" Item Sets")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"apriori"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#apriori","aria-hidden":"true"}},[this._v("#")]),this._v(" Apriori")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("如果一个集合是频繁集，那么它的所有子集都是频繁集")]),this._v(" "),s("li",[this._v("如果一个集合不是频繁集，那么它的所有超集都不会是频繁集")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("strong",[t._v("主要思想")]),t._v("就是从大小1开始遍历可能频繁集k"),a("br"),t._v("\n当满足V"),a("em",[t._v("所有")]),t._v("集合"),a("em",[t._v("子集")]),t._v("都在之前计算过的频繁集k中，且出现次数满足频繁要求"),a("br"),t._v("\n则V为k+1频繁集")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-vim extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vim"}},[a("code",[t._v("Ck"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Candidate itemset of size "),a("span",{attrs:{class:"token keyword"}},[t._v("k")]),t._v("\nLk "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Frequent itemset of size "),a("span",{attrs:{class:"token keyword"}},[t._v("k")]),t._v("\n\nL1 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("frequent items"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("k")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" Lk "),a("span",{attrs:{class:"token operator"}},[t._v("!=")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("k")]),a("span",{attrs:{class:"token operator"}},[t._v("+")]),a("span",{attrs:{class:"token operator"}},[t._v("+")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" do begin\n     Ck"),a("span",{attrs:{class:"token operator"}},[t._v("+")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" candidates generated from Lk"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" each transaction "),a("span",{attrs:{class:"token keyword"}},[t._v("t")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" database do\n       increment the count of "),a("span",{attrs:{class:"token keyword"}},[t._v("all")]),t._v(" candidates "),a("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" Ck"),a("span",{attrs:{class:"token operator"}},[t._v("+")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n    that are contained "),a("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("t")]),t._v("\n    Lk"),a("span",{attrs:{class:"token operator"}},[t._v("+")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("  "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" candidates "),a("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" Ck"),a("span",{attrs:{class:"token operator"}},[t._v("+")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" with min_support\n    end\n"),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("k")]),t._v(" Lk"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("举个简单的例子"),s("br"),this._v(" "),s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2018/png/104214/1539169922048-59e323a1-3185-4758-a4bb-1545710eb589.png",alt:"图片.png | center | 556x200"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("ol",[s("li",[this._v("多次读取数据，复杂度高")]),this._v(" "),s("li",[this._v("n较大，可能的取值较多")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"fp-tree"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fp-tree","aria-hidden":"true"}},[this._v("#")]),this._v(" FP-tree")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2018/png/104214/1539172271916-e70b4f05-5382-4c82-ba27-8ffa189886d8.png",alt:"图片.png | center | 556x200"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"sequences"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sequences","aria-hidden":"true"}},[this._v("#")]),this._v(" Sequences")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"gsp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gsp","aria-hidden":"true"}},[this._v("#")]),this._v(" GSP")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ol",[s("li",[this._v("Ci为Si的非空子集, 当i∈[2, n-1]")]),this._v(" "),s("li",[this._v("Ci为Si的子集, 当i==1 | i==n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2018/png/104214/1539186873976-297a4f7f-6496-42c6-aabd-d8454b8d38a3.png",alt:"图片.png | center | 556x200"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"prefixspan"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#prefixspan","aria-hidden":"true"}},[this._v("#")]),this._v(" PrefixSpan")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("定义 "),s("code",[this._v("<a(abc)(ac)d(cf)>")]),this._v("的前缀、后缀为")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("table",[a("thead",[a("tr",[a("th",[t._v("Prefix")]),t._v(" "),a("th",[t._v("Suffix")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("<a>")])]),t._v(" "),a("td",[a("code",[t._v("<(abc)(ac)d(cf)>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("<aa>")])]),t._v(" "),a("td",[a("code",[t._v("<(_bc)(ac)d(cf)>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("<ab>")])]),t._v(" "),a("td",[a("code",[t._v("<(_c)(ac)d(cf)>")])])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2018/png/104214/1539174965480-557e6b25-58cb-4b59-96fd-899ff8b13c51.png",alt:"图片.png | center | 556x200"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"tree-patterns"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tree-patterns","aria-hidden":"true"}},[this._v("#")]),this._v(" Tree patterns")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"范围编码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#范围编码","aria-hidden":"true"}},[this._v("#")]),this._v(" 范围编码")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("若Kb属于Ka，则A为B的祖先")]),this._v(" "),s("li",[this._v("若Kb∩Ka=∅，则A, B为广义兄弟")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2018/png/104214/1539185414835-02aa7ecb-2b5e-46cc-bd87-d58ff4547e74.png",alt:"图片.png | center | 556x200"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"string-representation-of-trees"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string-representation-of-trees","aria-hidden":"true"}},[this._v("#")]),this._v(" String Representation of Trees")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("如果第一次遍历到该节点则输出节点值")]),this._v(" "),s("li",[this._v("如果到达边界条件，跳出递归则输出-1")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2018/png/104214/1539231544990-6322a524-5e49-456b-a1d1-84ef0720df60.png",alt:"图片.png | center | 556x200"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"equivalence-classes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#equivalence-classes","aria-hidden":"true"}},[this._v("#")]),this._v(" Equivalence Classes")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("举个例子, 右侧的几棵树都有相同的前缀3 4 2 -1"),s("br"),this._v(" "),s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2018/png/104214/1539231980142-5da3ffa8-808c-4b4a-b0f7-76030761639e.png",alt:"图片.png | center | 556x200"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"treeminer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#treeminer","aria-hidden":"true"}},[this._v("#")]),this._v(" TreeMiner")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-vim extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vim"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" each element "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("x")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ∈ "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token keyword"}},[t._v("P")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" do\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Px"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" ∅"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" each element "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("y")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("j")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ∈ "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token keyword"}},[t._v("P")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" do\n       R "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("x")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("⊗"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("y")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("j")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n       "),a("span",{attrs:{class:"token function"}},[t._v("L")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("R"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token function"}},[t._v("L")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("x")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ∩⊗ "),a("span",{attrs:{class:"token function"}},[t._v("L")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("y")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n       "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" any R ∈ R"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" R "),a("span",{attrs:{class:"token operator"}},[t._v("is")]),t._v(" frequent then\n          "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Px"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Px"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" ∪ "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("R"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    Enumerate"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("Frequent"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token function"}},[t._v("Subtrees")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Px"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2018/png/104214/1539240851335-f76cdaec-afc6-4128-826d-72b4ec39dd6c.png",alt:"图片.png | center | 556x200"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"prefixtreeespan"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#prefixtreeespan","aria-hidden":"true"}},[this._v("#")]),this._v(" PrefixTreeESpan")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("举个栗子"),s("br"),this._v(" "),s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2018/png/104214/1539242586989-cb9052e4-9f7c-4a54-afc5-647ab9c534cf.png",alt:"图片.png | center | 556x200"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"graph-pattern"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#graph-pattern","aria-hidden":"true"}},[this._v("#")]),this._v(" Graph Pattern")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"agm"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#agm","aria-hidden":"true"}},[this._v("#")]),this._v(" AGM")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-vim extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vim"}},[a("code",[a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token operator"}},[t._v(".")]),t._v(" S1  数据集中的单个频繁元素"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token operator"}},[t._v(".")]),t._v(" 调用"),a("span",{attrs:{class:"token function"}},[t._v("AprioriGraph")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("D"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" min_sup"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" S1"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   Procedure "),a("span",{attrs:{class:"token function"}},[t._v("AprioriGraph")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("D"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" min_sup"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Sk"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("   "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token operator"}},[t._v(".")]),t._v("  初始化Sk"),a("span",{attrs:{class:"token operator"}},[t._v("+")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n     "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token operator"}},[t._v(".")]),t._v("   For each 频繁子图 gi ∈Sk\n     "),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token operator"}},[t._v(".")]),t._v("        For each频繁子图 gj∈Sk\n     "),a("span",{attrs:{class:"token number"}},[t._v("4")]),a("span",{attrs:{class:"token operator"}},[t._v(".")]),t._v("             For each 通过合并gi和gj形成规模为"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("k")]),a("span",{attrs:{class:"token operator"}},[t._v("+")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("的图g\n     "),a("span",{attrs:{class:"token number"}},[t._v("5")]),a("span",{attrs:{class:"token operator"}},[t._v(".")]),t._v("                    If g是频繁的，并且g不属于 Sk"),a("span",{attrs:{class:"token operator"}},[t._v("+")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n     "),a("span",{attrs:{class:"token number"}},[t._v("6")]),a("span",{attrs:{class:"token operator"}},[t._v(".")]),t._v("                              把g插入Sk"),a("span",{attrs:{class:"token operator"}},[t._v("+")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n     "),a("span",{attrs:{class:"token number"}},[t._v("7")]),a("span",{attrs:{class:"token operator"}},[t._v(".")]),t._v("   IF  Sk"),a("span",{attrs:{class:"token operator"}},[t._v("+")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("不为空， then调用"),a("span",{attrs:{class:"token function"}},[t._v("AprioriGraph")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("D"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" min_sup"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Sk"),a("span",{attrs:{class:"token operator"}},[t._v("+")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2018/png/104214/1539245852680-fd0df59d-3a11-4d37-97ac-36631f07c94c.png",alt:"图片.png | center | 556x200"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"fsg"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fsg","aria-hidden":"true"}},[this._v("#")]),this._v(" FSG")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-vim extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vim"}},[a("code",[t._v("Framework "),a("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" FSG"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\nStep1"),a("span",{attrs:{class:"token operator"}},[t._v(".")]),t._v("  Enumerating "),a("span",{attrs:{class:"token keyword"}},[t._v("all")]),t._v(" frequent single"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" and double"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("edge subgraphs"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nStep2"),a("span",{attrs:{class:"token operator"}},[t._v(".")]),t._v("  Generating "),a("span",{attrs:{class:"token keyword"}},[t._v("all")]),t._v(" candidate subgraphs whose size "),a("span",{attrs:{class:"token operator"}},[t._v("is")]),t._v(" greater than the "),a("span",{attrs:{class:"token keyword"}},[t._v("previous")]),t._v(" ones by one edge"),a("span",{attrs:{class:"token operator"}},[t._v(".")]),t._v("  "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Ck"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nStep3"),a("span",{attrs:{class:"token operator"}},[t._v(".")]),t._v(" Count the frequency "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" each of these candidates and prune infrequent subgraph patterns"),a("span",{attrs:{class:"token operator"}},[t._v(".")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Fk"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nStep4"),a("span",{attrs:{class:"token operator"}},[t._v(".")]),t._v(" | Fk |"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" STOP"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" otherwise "),a("span",{attrs:{class:"token keyword"}},[t._v("k")]),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token keyword"}},[t._v("k")]),a("span",{attrs:{class:"token operator"}},[t._v("+")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" and "),a("span",{attrs:{class:"token keyword"}},[t._v("goto")]),t._v(" Step "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token operator"}},[t._v(".")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2018/png/104214/1539246303282-b49cab28-450f-477b-85e3-4b7c4fa045e0.png",alt:"图片.png | center | 556x200"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"gspan"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gspan","aria-hidden":"true"}},[this._v("#")]),this._v(" gSpan")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2018/png/104214/1539247108519-28a62798-a8e6-40e7-bf66-5002619d0c63.png",alt:"图片.png | center | 556x200"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考","aria-hidden":"true"}},[this._v("#")]),this._v(" 参考")])}],!1,null,null,null);e.options.__file="frequent.md";s.default=e.exports}}]);